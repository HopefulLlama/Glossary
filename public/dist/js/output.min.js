angular.module("cardApp",[]).service("WebSocketService",["$interval",function(a){this.masonry=null,this.host=location.origin.replace(/^http/,"ws"),this.connected=!1,this.reconnectInterval=null,this.webSocket=null,this.createWebSocket=function(){var b=this;null===this.webSocket?(console.log("Attempting to connect..."),this.webSocket=new WebSocket(b.host),this.webSocket.onopen=function(c){console.log("Connected."),a.cancel(b.reconnectInterval),b.connected=!0},this.webSocket.onmessage=function(a){var c=JSON.parse(a.data);angular.element("[data-ng-controller=cardController]").scope().parsedJSON=c,angular.element("[data-ng-controller=cardController]").scope().$apply();var d=document.querySelector("#masonry-container");b.masonry=new Masonry(d,{itemSelector:".masonry-element"}),b.masonry.reloadItems(),b.masonry.layout()},this.webSocket.onclose=function(c){console.log("Connection closed."),b.connected=!1,b.webSocket=null,b.reconnectInterval||(b.reconnectInterval=a(function(){b.createWebSocket()},1e4))}):console.log("Connection already established.")},this.sendData=function(a){a.cards.forEach(function(a){delete a.$$hashKey}),this.webSocket.send(JSON.stringify(a)),this.masonry.reloadItems(),this.masonry.layout()},this.cleanup=function(){this.connected&&this.webSocket.close(),a.cancel(this.reconnectInterval)}}]).controller("cardController",["$scope","WebSocketService",function(a,b){a.WebSocketService=b,a.newCard={},a.parsedJSON={},a.showCards=!0,a.sorting={},a.sorting.predicate="title",a.sorting.reverse=!1,a.addCard=function(){var c=!1;if(a.newCard.title=a.newCard.title.trim(),a.newCard.desc=a.newCard.desc.trim(),a.parsedJSON.cards.forEach(function(b){a.newCard.title.toLowerCase()===b.title.toLowerCase()&&(c=!0)}),c)alert("Already exists. This card will not be added.");else{var d=[];if("undefined"!=typeof a.newCard.tags&&""!==a.newCard.tags){var e=a.newCard.tags.split(",");e.forEach(function(a){d.push(a.trim().toLowerCase())})}var f={title:a.newCard.title,desc:a.newCard.desc,tags:d};a.parsedJSON.cards.push(f),b.sendData(a.parsedJSON),$("#add-card-modal").modal("hide"),a.newCard.title="",a.newCard.desc="",a.newCard.tags=""}},a.removeCard=function(c){var d=a.parsedJSON.cards.indexOf(c);a.parsedJSON.cards.splice(d,1),b.sendData(a.parsedJSON)},a.validateForm=function(){return!("undefined"==typeof a.newCard.title||""===a.newCard.title||"undefined"==typeof a.newCard.desc||""===a.newCard.desc)},a.reverseSorting=function(){a.showCards=!1,a.$apply(),a.sorting.reverse=!a.sorting.reverse,a.showCards=!0,a.$apply()},b.createWebSocket(),a.$on("$destroy",function(){b.cleanUp()})}]).directive("card",function(){return{restrict:"E",scope:{details:"=",removeCard:"=",connected:"="},templateUrl:"html/card.html"}});